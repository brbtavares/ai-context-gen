{
  "entries": [
    {
      "timestamp": "2025-01-01T12:00:00Z",
      "title": "Initial Rust project setup",
      "content": "To create a new Rust project:\n1. cargo new project_name\n2. cd project_name\n3. cargo run\n\nTo add dependencies, edit Cargo.toml:\n[dependencies]\nserde = { version = \"1.0\", features = [\"derive\"] }\ntokio = { version = \"1.0\", features = [\"full\"] }",
      "tags": ["rust", "setup", "cargo", "development"]
    },
    {
      "timestamp": "2025-01-01T12:30:00Z",
      "title": "Error handling patterns in Rust",
      "content": "Rust uses Result<T, E> for error handling:\n\n// Function return that can fail\nfn divide(a: f64, b: f64) -> Result<f64, String> {\n    if b == 0.0 {\n        Err(\"Division by zero!\".to_string())\n    } else {\n        Ok(a / b)\n    }\n}\n\n// Usage with match\nmatch divide(10.0, 2.0) {\n    Ok(result) => println!(\"Result: {}\", result),\n    Err(e) => println!(\"Error: {}\", e),\n}\n\n// Usage with ? operator\nfn example() -> Result<(), Box<dyn std::error::Error>> {\n    let result = divide(10.0, 2.0)?;\n    println!(\"Result: {}\", result);\n    Ok(())\n}",
      "tags": ["rust", "error-handling", "result", "pattern-matching"]
    },
    {
      "timestamp": "2025-01-01T13:00:00Z",
      "title": "Recommended Rust project structure",
      "content": "Typical Rust project structure:\n\n```\nmy_project/\n├── Cargo.toml\n├── Cargo.lock\n├── src/\n│   ├── main.rs          # Entry point for binaries\n│   ├── lib.rs           # Library root\n│   ├── bin/             # Additional executables\n│   │   └── another_bin.rs\n│   └── modules/         # Organized modules\n│       ├── mod.rs\n│       └── utils.rs\n├── tests/              # Integration tests\n│   └── integration_test.rs\n├── examples/           # Code examples\n│   └── example.rs\n└── README.md\n```",
      "tags": ["rust", "structure", "project", "organization"]
    }
  ],
  "current_project": "ai-context-gen"
}
